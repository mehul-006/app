# postgres-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  PGDATA: /var/lib/postgresql/data/pgdata

---

# postgres-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXM=  # 'postgres' base64 encoded

---

# postgres-storage.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

# postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:14
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---

# postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres

---

# pgadmin-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-config
  labels:
    app: pgadmin
data:
  PGADMIN_DEFAULT_EMAIL: admin@example.com

---

# pgadmin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-secret
type: Opaque
data:
  PGADMIN_DEFAULT_PASSWORD: YWRtaW4=  # 'admin' base64 encoded

---

# pgadmin-storage.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  labels:
    app: pgadmin
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

# pgadmin-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: pgadmin-config
            - secretRef:
                name: pgadmin-secret
          volumeMounts:
            - mountPath: /var/lib/pgadmin
              name: pgadmin-storage
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
      volumes:
        - name: pgadmin-storage
          persistentVolumeClaim:
            claimName: pgadmin-pvc

---

# pgadmin-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  labels:
    app: pgadmin
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: pgadmin

---

# app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  labels:
    app: flask-app
data:
  DB_HOST: postgres
  DB_NAME: postgres
  DB_USER: postgres
  DB_PORT: "5432"

---

# app-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  DB_PASSWORD: cG9zdGdyZXM=  # 'postgres' base64 encoded

---

# app-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: flask-postgres-app:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secret
          resources:
            limits:
              memory: "256Mi"
              cpu: "300m"
            requests:
              memory: "128Mi"
              cpu: "100m"
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 20

---

# app-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flask-app
  labels:
    app: flask-app
spec:
  ports:
    - port: 80
      targetPort: 5000
  selector:
    app: flask-app

---

# tls-cert-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
type: kubernetes.io/tls
data:
  # These values need to be replaced with actual base64-encoded certificate and key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZaekNDQTArZ0F3SUJBZ0lVRXV4STU5ek9ZdHNWdGMxYklwZUdmYXJQbnZnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1FqRUxNQWtHQTFVRUJoTUNUa3d4RWpBUUJnTlZCQWdNQ1U1dmNtUm9iMnhzWVRFUk1BOEdBMVVFQ2d3SQpUWGxCY0hCc2FXTXhEREFLQmdOVkJBTU1BMU5TVERPQUVDQVFBP09oMEdyN05VTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4NnFOOHM5ZVB5VUwzeUlSTnZlCmZQeHZQUk1TZWtRcDVGQUtFSzBLWmRPVHE1ZXNWTjZYTkJibWRsWEZlT1NwdWdFZGlXdzdZVDNLZDd4MjVKbkYKbHBwSXA3NE82dTVWZ3YyY2RnSjJnckM1bldXWGJadXdoY0pEYWVDMS9EM2VUSStmQzJWVXNIRlpXZDErWkFLdApSNElKQkVZR2xIT1M2MnUzbmNrK29tNS9wQTg1dlo4RExyUkZFRHkzVXdUdFVTMFpueHo2bjV3YlRmZ2hDYmZsCjBpeENSZkhUQm9CQlliSHNodkZaMUk3WE9pQUFiWWhzRHlNeGdSZm8xVTZmWEF5eU1uZFQxU0pnRHk0emZDTVAKRnl1aWZSN0ZWeUpLYzdLVlN1VVZsZ1I5WVRKQ2ZlakpmTElrL1VTTXBtakxJQVZqSzdBdWRQQnBQYXFnM3dJRApSMnFjMU1JaTRUUEpDQlBFTGNDS1ZRSURBUUFCbzRJQ2FEQ0NBbVF3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHCkExVWREZ1FXQkJUQ3FlU01pcXVxd292TWJEd2dNNnZlSHlUbHREQWZCZ05WSFNNRUdEQVdnQlRTUUVGQU1reUsKYUN5NzdVUWU5SXZPMW1IZGlqQ0NBVThHQTFVZEVRU0NBVVl3Z2dGQ2dnRUtn
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRREhxbzN5ejE0L0pRdmYKSWhFMjk1OC9HODlFeEo2UkNua1VBb1FyUXBsMDVPcmw2eFUzcGMwRnVaMlZjVjQ1S202QVIySmJEdGhQY3AzdgpIYmttY1dXbWtpbnZnN3E3bFdDL1p4MkFuYUNzTG1kWlpkdG03Q0Z3a05wNExYOFBkNU1qNThMWlZTd2NWbFozClg1a0FxMUhnZ2tFUmdhVWM1THJhN2VkeVQ2aWJuK2tEem05bndNdXRFVVFQTGRUQk8xUkxSbWZIUHFmbkJ0TisKQ0VKdCtYU0xFSkY4ZE1HZ0VGaHNleUc4Vm5VanRjNklBQnRpR3dQSXpHQkYralZUcDljRExJeWQxUFZJbUFQTApqTjhJdzhYSzZKOUhzVlhJa3B6c3BWS3BSV1dCSDFoTWtKOTZNbDhzaVQ5Ukl5bWFNc2dCV01yc0M1MDhHazlxCnFEZkFnTUJBQUVDZ2dFQVZ0eWhKVnROYmc4WVJ4R09jQ1YzOU95VXlQMmg0Q3NZR21nSmN4UDA4Wk5aZmtZbkoKLzYzVkpJVE0wbVZ4ZFV1d0JHN0tYRHlpSVlFTUxqTWdIMHF5RnhDd0x3dzRYdEwzY1hLcytXT3g1dS83cEVlRQpjWXc5NVU3REF5YUhuUkhnTlN3Z2NmUGgyQjQzeDdkdmp0MWRmT2tZVXFZQnRPbFg0MDZUQlZpY2dHdmZ0OHl2Cmk2M2NZWVE3a3E3elpIdWd5Z3NCa1IrOHNycG9hZFlLU2NqOWRBbnM3Q1pPS1prQVJQVGJnUlFyQmZlbkoxNGMKSXc5Y1RxYXFuUzVpNG9XNkpZeWJCS3RKU3JQY2hSbVpOdFpQNVlNanA1MEhpZ2dOUFlSbVEyVVQrcVZHRU90RApUVnYzeUFvUUx3dEJrWFhiSTV4d0QzUEVlZjJVQi9uNFFRSZ==

---

# ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - app.example.com
    secretName: tls-secret
  rules:
  - host: app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: flask-app
            port:
              number: 80
  - host: pgadmin.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pgadmin
            port:
              number: 80
